scopeName: 'text.hl7'
name: 'HL7'
fileTypes: [
    'edi'
    'hl7'
]
patterns: [
    {
        ###
        Very clearly identify HL7 segments so we can tell when them apart in the event
        that they are get nested for some reason (it happens)
        ###
        comment: 'SegmentOptions'
        match: '(AL1|ACC|DG1|DRG|EVN|GT1|IN1|IN2|MSH|NK1|NTE|OBR|OBX|ORC|PD1|PID|PR1|PV1|PV2|UB1|UB2|FT1)'
        name: 'entity.name.type.hl7.segment'
    }
    {
        ###
        Identify HL7 characters that have been escaped.
        ###
        comment: 'EscapeSequences'
        match: '(\\\\.+\\\\)'
        name: 'constant.numeric.hl7.escape'
    }
    {'include': '#messageType'}
    {'include': '#phoneNumber'}
    {'include': '#SSN'}
    {'include': '#dateTime'}
    {
        ###
        Identify all HL7 special characters
        ###
        comment: 'SpecialCharacters'
        match: '(\\^|~|\\\\|&)'
        name: 'string.other.hl7.special.characters'
    }
    {
        ###
        Identify all separators
        ###
        comment: 'Delimiter'
        match: '(\\|)'
        name: 'constant.character.hl7.delimeter'
    }
    # {
    #     ###
    #     Attempts to capture all instaces of where accession number was found
    #     ###
    #     comment: 'AccessionNumber'
    #     begin: '(OBR|ORC\\|)([a-zA-Z0-9]*)(\\|)'
    #     end: '(\\|)'
    #     beginCaptures:
    #         '1':
    #             name: 'constant.character.hl7'
    #         '2':
    #             name: 'support.function.hl7.accessionNum'
    #     name: 'constant.character.hl7'
    #     patterns: [
    #         {
    #             captures:
    #                 '1':
    #                     name: 'support.function.hl7.accessionNum'
    #             match: '(.*?)'
    #         }
    #     ]
    # }
]
'repository':
    'messageType':
        'patterns': [
            {
                ###
                Grabs the type of message and the associated trigger type
                ###
              captures:
                  '1':
                      name: 'constant.character.hl7.delimeter'
                  '2':
                      name: 'support.function.hl7.mesgType'
                  '3':
                      name: 'string.other.hl7.special.characters'
                  '4':
                      name: 'support.function.hl7.mesgTrigger'
                match: '(\\|)(ADT|MDM|MFN|PPR|OMG|ORU|ORM|REF|ACK|DFT)(\\^)(...)'
            }
        ]
    'dateTime':
        'patterns': [
            {
                captures:
                    '1':
                        name: 'string.other.hl7.special.characters'
                    '2':
                        name: 'entity.other.inherited-class.hl7.datetime'
                    '12':
                        name: 'string.other.hl7.special.characters'
                match: '(\\^)(((19|20)\\d\\d)(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([01]?[0-9]|2[0-3])?([0-5][0-9])?([0-5][0-9])?([0-5][0-9])?([0-9][0-9][0-9][0-9][0-9])?)(\\^)'
            }
            {
                captures:
                    '1':
                        name: 'string.other.hl7.special.characters'
                    '2':
                        name: 'entity.other.inherited-class.hl7.datetime'
                    '12':
                        name: 'constant.character.hl7.delimeter'
                match: '(\\^)(((19|20)\\d\\d)(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([01]?[0-9]|2[0-3])?([0-5][0-9])?([0-5][0-9])?([0-5][0-9])?([0-9][0-9][0-9][0-9][0-9])?)(\\|)'
            }
            {
                captures:
                    '1':
                        name: 'constant.character.hl7.delimeter'
                    '2':
                        name: 'entity.other.inherited-class.hl7.datetime'
                    '12':
                        name: 'string.other.hl7.special.characters'
                match: '(\\|)(((19|20)\\d\\d)(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([01]?[0-9]|2[0-3])?([0-5][0-9])?([0-5][0-9])?([0-5][0-9])?([0-9][0-9][0-9][0-9][0-9])?)(\\^)'
          }
          {
              captures:
                  '1':
                      name: 'constant.character.hl7.delimeter'
                  '2':
                      name: 'entity.other.inherited-class.hl7.datetime'
                  '12':
                      name: 'constant.character.hl7.delimeter'
                  '13':
                      name: 'entity.other.inherited-class.hl7.datetime'
                  '24':
                      name: 'constant.character.hl7.delimeter'
              match: '(\\|)(((19|20)\\d\\d)(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([01]?[0-9]|2[0-3])?([0-5][0-9])?([0-5][0-9])?([0-5][0-9])?([0-9][0-9][0-9][0-9][0-9])?)(\\|)(((19|20)\\d\\d)(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([01]?[0-9]|2[0-3])?([0-5][0-9])?([0-5][0-9])?([0-5][0-9])?([0-9][0-9][0-9][0-9][0-9])?)(\\|)'
          }
          {
              captures:
                  '1':
                      name: 'constant.character.hl7.delimeter'
                  '2':
                      name: 'entity.other.inherited-class.hl7.datetime'
                  '12':
                      name: 'constant.character.hl7.delimeter'
              match: '(\\|)(((19|20)\\d\\d)(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([01]?[0-9]|2[0-3])?([0-5][0-9])?([0-5][0-9])?([0-5][0-9])?([0-9][0-9][0-9][0-9][0-9])?)(\\|)'
          }
        ]
    'phoneNumber':
        'patterns': [
            {
              ###
              Attempt to identify phone numbers country codes accounted for somewhat
              ###
              comment: "PhoneNum"
              match: '\\b(\\d{0,2}?\\(?\\d{3}\\)?\\d{3}-?\\d{4})\\b'
              name: 'support.function.hl7.phone'

            }
        ]
    'SSN':
        'patterns': [
            {
              captures:
                  '1':
                      name: 'constant.character.hl7.delimeter'
                  '2':
                      name: 'support.variable.hl7.ssn'
                  '3':
                      name: 'constant.character.hl7.delimeter'
              match: '(\\|)(\\d{3}-?\\d{2}-?\\d{4})(\\|)'
            }
        ]
